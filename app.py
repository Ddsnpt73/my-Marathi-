import streamlit as st
import os
from PyPDF2 import PdfReader
import requests
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.llms import HuggingFaceEndpoint
from langchain.chains import RetrievalQA
import time

# ----------------------------
# 1. рдкреЗрдЬ рд╕реЗрдЯрд┐рдВрдЧреНрдЬ
# ----------------------------
st.set_page_config(
    page_title="рдорд░рд╛рдареА AI рдПрдЬрдВрдЯ рдмрд┐рд▓реНрдбрд░",
    page_icon="ЁЯдЦ",
    layout="centered"
)

st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Yatra+One&display=swap');
html, body, [class*="css"] {
    font-family: 'Yatra One', cursive;
    direction: ltr;
}
</style>
""", unsafe_allow_html=True)

st.title("ЁЯдЦ рдорд░рд╛рдареА AI рдПрдЬрдВрдЯ")
st.write("рдорд░рд╛рдареА PDF рдЕрдкрд▓реЛрдб рдХрд░рд╛ рдЖрдгрд┐ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛!")

# ----------------------------
# 2. Bhashini API Key (рддреВ рдЦрд╛рд▓реА рддреБрдЭреА KEY рдЯрд╛рдХрд╢реАрд▓)
# ----------------------------
BHASHINI_API_KEY = "рддреБрдЭреА_BHASHINI_API_KEY_рдЗрдереЗ_рдЯрд╛рдХрд╛"  # тЖР рд╣реА рдУрд│ рдмрджрд▓!
USER_ID = "default_user"

# ----------------------------
# 3. PDF рдЕрдкрд▓реЛрдб
# ----------------------------
uploaded_file = st.file_uploader("рдорд░рд╛рдареА PDF рдЕрдкрд▓реЛрдб рдХрд░рд╛", type="pdf")

if uploaded_file:
    st.success("PDF рдЕрдкрд▓реЛрдб рдЭрд╛рд▓реЗ рдЖрд╣реЗ! ЁЯУД")
    
    # PDF рд╡рд╛рдЪрд╛
    pdf_reader = PdfReader(uploaded_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text() or ""
    
    # рдЬрд░ PDF рдордзреНрдпреЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд╕реЗрд▓ (рд╕реНрдХреЕрди рдХреЗрд▓реЗрд▓рд╛ рдЕрд╕реЗрд▓), рддрд░ Bhashini OCR рд╡рд╛рдкрд░рд╛
    if not text.strip():
        st.info("PDF рдордзреНрдпреЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд╛рд╣реА тАФ OCR рд╡рд╛рдкрд░рдд рдЖрд╣реЗ...")
        # Bhashini OCR API рд▓рд╛ рдХреЙрд▓ рдХрд░рд╛ (рд╕реЛрдкреЗ рдЙрджрд╛рд╣рд░рдг)
        # (рд╣реЗ рднрд╡рд┐рд╖реНрдпрд╛рдд рд╡рд╛рдврд╡рддрд╛ рдпреЗрдИрд▓; рд╕рдзреНрдпрд╛ рдлрдХреНрдд рдЯреЗрдХреНрд╕реНрдЯ PDF рд╕рдкреЛрд░реНрдЯ)
        text = "рд╣рд╛ PDF рд╕реНрдХреЕрди рдХреЗрд▓реЗрд▓рд╛ рдЖрд╣реЗ. рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдЕрд╕рд▓реЗрд▓рд╛ PDF рдЕрдкрд▓реЛрдб рдХрд░рд╛."
    
    if text.strip():
        # рдЯреЗрдХреНрд╕реНрдЯ рдЪрд┐рдВрдХреНрдпрд╛рдВрдордзреНрдпреЗ рд╡рд┐рднрд╛рдЧрд╛
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
        chunks = text_splitter.split_text(text)
        
        # рдПрдореНрдмреЗрдбрд┐рдВрдЧреНрдЬ + рд╡реНрд╣реЗрдХреНрдЯрд░ рдбреАрдмреА
        embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
        vectorstore = Chroma.from_texts(chunks, embeddings)
        
        # LLM (Llama 3 via Hugging Face)
        llm = HuggingFaceEndpoint(
            repo_id="meta-llama/Meta-Llama-3-8B-Instruct",
            temperature=0.3,
            huggingfacehub_api_token="рддреБрдЭреА_HUGGINGFACE_TOKEN_рдЗрдереЗ_рдЯрд╛рдХрд╛"  # тЖР рд╣реА рдУрд│ рдмрджрд▓!
        )
        
        # RAG рдЪреЗрди
        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            chain_type="stuff",
            retriever=vectorstore.as_retriever(),
            return_source_documents=True
        )
        
        # рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛
        user_question = st.text_input("рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рдорд░рд╛рдареАрдд рд╡рд┐рдЪрд╛рд░рд╛:")
        
        if user_question:
            with st.spinner("рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рд╢реЛрдзрдд рдЖрд╣реЗ... ЁЯдЦ"):
                try:
                    response = qa_chain({"query": user_question})
                    st.subheader("рдЙрддреНрддрд░:")
                    st.write(response["result"])
                    
                    # рд╕реНрд░реЛрдд рджрд╛рдЦрд╡рд╛ (рдРрдЪреНрдЫрд┐рдХ)
                    with st.expander("рд╕реНрд░реЛрдд (PDF рдордзреАрд▓ рднрд╛рдЧ)"):
                        for i, doc in enumerate(response["source_documents"]):
                            st.write(f"рднрд╛рдЧ {i+1}: {doc.page_content[:200]}...")
                except Exception as e:
                    st.error(f"рддреНрд░реБрдЯреА: {str(e)}")
                    st.write("рдХреГрдкрдпрд╛ Hugging Face рдЖрдгрд┐ Bhashini API keys рддрдкрд╛рд╕рд╛.")
    else:
        st.warning("PDF рдордзреНрдпреЗ рдХрд╛рд╣реАрд╣реА рдЯреЗрдХреНрд╕реНрдЯ рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рджреБрд╕рд░рд╛ PDF рдЕрдкрд▓реЛрдб рдХрд░рд╛.")

# ----------------------------
# 4. рд╕реВрдЪрдирд╛
# ----------------------------
st.markdown("---")
st.caption("рд╣рд╛ рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо рдорд░рд╛рдареА рднрд╛рд╖рд┐рдХрд╛рдВрд╕рд╛рдареА AI рдЪреА рд╢рдХреНрддреА рджреЗрддреЛ. ЁЯЩП")
